---
// MenuBar component: classic Macintosh style pulldown menus
interface Props {
	currentPath?: string;
}
const { currentPath = "/" } = Astro.props as Props;
const base = (import.meta as any).env?.BASE_URL || "/";
---

<nav class="menubar" aria-label="Primary">
	<!-- Apple logo menu -->
	<div class="menu-root apple" data-menu data-menu-id="apple">
		<button
			class="menu-button"
			type="button"
			aria-haspopup="true"
			aria-expanded="false"
			aria-label="Apple menu"
		>
			
		</button>
		<ul class="menu-list" role="menu" aria-label="Apple menu">
			<li class="menu-item">
				<button type="button" role="menuitem" data-open-about
					>About This Site…</button
				>
			</li>
		</ul>
	</div>

	<!-- Active app name (dynamic) -->
	<div class="menu-root" data-menu data-menu-id="app">
		<button
			class="menu-button"
			type="button"
			aria-haspopup="true"
			aria-expanded="false"
		>
			<span data-active-app-label>System</span>
		</button>
		<ul class="menu-list" role="menu" aria-label="Application menu">
			<li class="menu-item">
				<button type="button" role="menuitem" data-action="hide">Hide</button>
			</li>
			<li class="menu-item">
				<button type="button" role="menuitem" data-action="hide-others"
					>Hide Others</button
				>
			</li>
			<li class="menu-item">
				<button type="button" role="menuitem" data-action="show-all"
					>Show All</button
				>
			</li>
		</ul>
	</div>

	<!-- File menu (new) -->
	<div class="menu-root" data-menu data-menu-id="file">
		<button
			class="menu-button"
			type="button"
			aria-haspopup="true"
			aria-expanded="false">File</button
		>
		<ul class="menu-list" role="menu" aria-label="File menu">
			<li class="menu-item">
				<button type="button" role="menuitem">New</button>
			</li>
			<li class="menu-item">
				<button type="button" role="menuitem">Open…</button>
			</li>
			<li class="menu-item">
				<button type="button" role="menuitem">Close</button>
			</li>
		</ul>
	</div>

	<!-- Edit menu -->
	<div class="menu-root" data-menu data-menu-id="edit">
		<button
			class="menu-button"
			type="button"
			aria-haspopup="true"
			aria-expanded="false">Edit</button
		>
		<ul class="menu-list" role="menu" aria-label="Edit menu">
			<li class="menu-item">
				<button type="button" role="menuitem">Undo</button>
			</li>
			<li class="menu-item">
				<button type="button" role="menuitem">Cut</button>
			</li>
			<li class="menu-item">
				<button type="button" role="menuitem">Copy</button>
			</li>
			<li class="menu-item">
				<button type="button" role="menuitem">Paste</button>
			</li>
		</ul>
	</div>

	<!-- View menu -->
	<div class="menu-root" data-menu data-menu-id="view">
		<button
			class="menu-button"
			type="button"
			aria-haspopup="true"
			aria-expanded="false">View</button
		>
		<ul class="menu-list" role="menu" aria-label="View menu">
			<li class="menu-item">
				<button type="button" role="menuitem">Zoom In</button>
			</li>
			<li class="menu-item">
				<button type="button" role="menuitem">Zoom Out</button>
			</li>
			<li class="menu-item">
				<button type="button" role="menuitem">Actual Size</button>
			</li>
		</ul>
	</div>

	<div style="flex:1"></div>
	<div class="clock" aria-live="polite" data-clock>00:00</div>
	<button
		class="about-launch no-print"
		type="button"
		aria-label="Open About"
		title="About"
		data-open-about
	>
		<img
			src={base + "icons/apple.svg"}
			alt=""
			width="22"
			height="22"
			style="image-rendering:pixelated;"
		/>
	</button>
</nav>

<script is:inline>
	(function () {
		const root = document.currentScript.parentElement;
		const menus = Array.from(root.querySelectorAll("[data-menu]"));
		let openMenu = null;

		function closeAll() {
			menus.forEach((r) => {
				r.classList.remove("open");
				const b = r.querySelector("button.menu-button");
				b && b.setAttribute("aria-expanded", "false");
			});
			openMenu = null;
		}
		function open(r) {
			r.classList.add("open");
			const b = r.querySelector("button.menu-button");
			b && b.setAttribute("aria-expanded", "true");
			openMenu = r;
		}

		menus.forEach((r) => {
			const btn = r.querySelector("button.menu-button");
			btn.addEventListener("click", () => {
				const isOpen = r.classList.contains("open");
				closeAll();
				if (!isOpen) open(r);
			});
			// close when leaving hover over that menu
			r.addEventListener("mouseleave", () => {
				if (r.classList.contains("open")) closeAll();
			});
			// if another menu is open, hovering this one switches
			r.addEventListener("mouseenter", () => {
				if (openMenu && openMenu !== r) {
					closeAll();
					open(r);
				}
			});
		});

		document.addEventListener("click", (e) => {
			if (!root.contains(e.target)) closeAll();
		});

		// Update active app name when a window is focused
		const appLabel = root.querySelector("[data-active-app-label]");
		window.addEventListener("window-focused", (e) => {
			const detail = (e && e.detail) || {};
			if (detail && detail.title) {
				appLabel.textContent = detail.title;
			}
		});

		// Open About window from either Apple menu or right icon
		function openAbout() {
			try {
				// @ts-ignore
				const wm = window.__windowManager;
				if (wm && wm.setVisible) {
					wm.setVisible("about-window", true);
					return;
				}
			} catch {}
			try {
				window.dispatchEvent(
					new CustomEvent("window-visibility-change", {
						detail: { id: "about-window", visible: true },
					})
				);
			} catch {}
		}

		root.querySelectorAll("[data-open-about]").forEach((el) => {
			el.addEventListener("click", openAbout);
		});

		function updateClock() {
			const el = root.querySelector("[data-clock]");
			const d = new Date();
			const hh = String(d.getHours()).padStart(2, "0");
			const mm = String(d.getMinutes()).padStart(2, "0");
			el.textContent = hh + ":" + mm;
		}
		updateClock();
		setInterval(updateClock, 60 * 1000);
	})();
</script>
<style is:inline>
	.about-launch {
		background: none;
		border: 0;
		padding: 0 6px;
		height: 100%;
		display: inline-flex;
		align-items: center;
		cursor: pointer;
	}
</style>
