---
// MenuBar component: classic Macintosh style pulldown menus
import ToggleRetro from "./ToggleRetro.astro";
interface Props {
	currentPath?: string;
}
const { currentPath = "/" } = Astro.props as Props;
const base = (import.meta as any).env?.BASE_URL || "/";
---

<nav class="menubar" aria-label="Primary">
	<!-- Apple logo menu -->
	<div class="menu-root apple" data-menu data-menu-id="apple">
		<button
			class="menu-button"
			type="button"
			aria-haspopup="true"
			aria-expanded="false"
			aria-label="Apple menu"
		>
			
		</button>
		<ul class="menu-list" role="menu" aria-label="Apple menu">
			<li class="menu-item">
				<button type="button" role="menuitem" data-open-about-mac
					>About This Macintosh…</button
				>
			</li>
			<li class="menu-item">
				<hr
					aria-hidden="true"
					style="border:0; border-top:1px solid #000; margin:2px 0;"
				/>
			</li>
			<li class="menu-item">
				<button type="button" role="menuitem" data-open-about
					>About This Site…</button
				>
			</li>
		</ul>
	</div>

	<!-- Active app name (dynamic) -->
	<div class="menu-root" data-menu data-menu-id="app">
		<button
			class="menu-button"
			type="button"
			aria-haspopup="true"
			aria-expanded="false"
		>
			<span data-active-app-label>System</span>
		</button>
		<ul class="menu-list" role="menu" aria-label="Application menu">
			<li class="menu-item">
				<button type="button" role="menuitem" data-action="hide">
					<span class="menu-check" aria-hidden="true"></span>
					<span class="menu-label">Hide</span>
					<span class="menu-accel">⌘H</span>
				</button>
			</li>
			<li class="menu-item">
				<button type="button" role="menuitem" data-action="hide-others">
					<span class="menu-check" aria-hidden="true"></span>
					<span class="menu-label">Hide Others</span>
					<span class="menu-accel">⌥⌘H</span>
				</button>
			</li>
			<li class="menu-item">
				<button type="button" role="menuitem" data-action="show-all">
					<span class="menu-check" aria-hidden="true"></span>
					<span class="menu-label">Show All</span>
					<span class="menu-accel"></span>
				</button>
			</li>
		</ul>
	</div>

	<!-- File menu (new) -->
	<div class="menu-root" data-menu data-menu-id="file">
		<button
			class="menu-button"
			type="button"
			aria-haspopup="true"
			aria-expanded="false">File</button
		>
		<ul class="menu-list" role="menu" aria-label="File menu">
			<li class="menu-item">
				<button type="button" role="menuitem">
					<span class="menu-check" aria-hidden="true"></span>
					<span class="menu-label">New</span>
					<span class="menu-accel">⌘N</span>
				</button>
			</li>
			<li class="menu-item">
				<button type="button" role="menuitem">
					<span class="menu-check" aria-hidden="true"></span>
					<span class="menu-label">Open…</span>
					<span class="menu-accel">⌘O</span>
				</button>
			</li>
			<li class="menu-item">
				<button type="button" role="menuitem">
					<span class="menu-check" aria-hidden="true"></span>
					<span class="menu-label">Close</span>
					<span class="menu-accel">⌘W</span>
				</button>
			</li>
		</ul>
	</div>

	<!-- Edit menu -->
	<div class="menu-root" data-menu data-menu-id="edit">
		<button
			class="menu-button"
			type="button"
			aria-haspopup="true"
			aria-expanded="false">Edit</button
		>
		<ul class="menu-list" role="menu" aria-label="Edit menu">
			<li class="menu-item">
				<button type="button" role="menuitem">
					<span class="menu-check" aria-hidden="true"></span>
					<span class="menu-label">Undo</span>
					<span class="menu-accel">⌘Z</span>
				</button>
			</li>
			<li class="menu-item">
				<button type="button" role="menuitem">
					<span class="menu-check" aria-hidden="true"></span>
					<span class="menu-label">Cut</span>
					<span class="menu-accel">⌘X</span>
				</button>
			</li>
			<li class="menu-item">
				<button type="button" role="menuitem">
					<span class="menu-check" aria-hidden="true"></span>
					<span class="menu-label">Copy</span>
					<span class="menu-accel">⌘C</span>
				</button>
			</li>
			<li class="menu-item">
				<button type="button" role="menuitem">
					<span class="menu-check" aria-hidden="true"></span>
					<span class="menu-label">Paste</span>
					<span class="menu-accel">⌘V</span>
				</button>
			</li>
		</ul>
	</div>

	<!-- View menu -->
	<div class="menu-root" data-menu data-menu-id="view">
		<button
			class="menu-button"
			type="button"
			aria-haspopup="true"
			aria-expanded="false">View</button
		>
		<ul class="menu-list" role="menu" aria-label="View menu">
			<li class="menu-item">
				<button type="button" role="menuitem">
					<span class="menu-check" aria-hidden="true"></span>
					<span class="menu-label">Zoom In</span>
					<span class="menu-accel">⌘+</span>
				</button>
			</li>
			<li class="menu-item">
				<button type="button" role="menuitem">
					<span class="menu-check" aria-hidden="true"></span>
					<span class="menu-label">Zoom Out</span>
					<span class="menu-accel">⌘−</span>
				</button>
			</li>
			<li class="menu-item">
				<button type="button" role="menuitem">
					<span class="menu-check" aria-hidden="true"></span>
					<span class="menu-label">Actual Size</span>
					<span class="menu-accel">⌘0</span>
				</button>
			</li>
		</ul>
	</div>

	<!-- Special menu (System 7 vibe) -->
	<div class="menu-root" data-menu data-menu-id="special">
		<button
			class="menu-button"
			type="button"
			aria-haspopup="true"
			aria-expanded="false">Special</button
		>
		<ul class="menu-list" role="menu" aria-label="Special menu">
			<li class="menu-item" aria-disabled="true">
				<button type="button" role="menuitem" disabled>Empty Trash</button>
			</li>
			<li class="menu-item">
				<button type="button" role="menuitem">Restart…</button>
			</li>
			<li class="menu-item">
				<button type="button" role="menuitem">Shut Down…</button>
			</li>
		</ul>
	</div>

	<div style="flex:1"></div>
	<div class="clock" aria-live="polite" data-clock>00:00</div>
	<!-- Retro toggles (Scanlines / Dark / SFX) -->
	<div class="no-print" style="display:flex;align-items:center;gap:8px;margin-left:8px;">
		<ToggleRetro />
	</div>
	<button
		class="about-launch no-print"
		type="button"
		aria-label="Open About"
		title="About"
		data-open-about
	>
		<img
			src={base + "icons/about.svg"}
			alt=""
			width="22"
			height="22"
			style="image-rendering:pixelated;"
		/>
	</button>
</nav>

<script is:inline>
	(function () {
		const root = document.currentScript.parentElement;
		const menus = Array.from(root.querySelectorAll("[data-menu]"));
		let openMenu = null;
		let closeTimer = null;

		function clearCloseTimer() {
			if (closeTimer) {
				clearTimeout(closeTimer);
				closeTimer = null;
			}
		}
		function closeAll() {
			menus.forEach((r) => {
				r.classList.remove("open");
				const b = r.querySelector("button.menu-button");
				b && b.setAttribute("aria-expanded", "false");
			});
			openMenu = null;
		}
		function open(r) {
			r.classList.add("open");
			const b = r.querySelector("button.menu-button");
			b && b.setAttribute("aria-expanded", "true");
			openMenu = r;
		}

		menus.forEach((r) => {
			const btn = r.querySelector("button.menu-button");
			// Abrir al hacer hover; cancelar timers de cierre
			r.addEventListener("mouseenter", () => {
				clearCloseTimer();
				closeAll();
				open(r);
			});
			// Cerrar con pequeño delay para evitar flicker al moverse entre menús
			r.addEventListener("mouseleave", () => {
				clearCloseTimer();
				closeTimer = setTimeout(() => {
					closeAll();
				}, 160);
			});
		});

		document.addEventListener("click", (e) => {
			if (!root.contains(e.target)) {
				clearCloseTimer();
				closeAll();
			}
		});

		// Update active app name when a window is focused
		const appLabel = root.querySelector("[data-active-app-label]");
		window.addEventListener("window-focused", (e) => {
			const detail = (e && e.detail) || {};
			if (detail && detail.title) {
				appLabel.textContent = detail.title;
			}
		});

		// Open About windows
		function openById(id) {
			try {
				// @ts-ignore
				const wm = window.__windowManager;
				if (wm && wm.setVisible) {
					wm.setVisible(id, true);
					return;
				}
			} catch {}
			try {
				window.dispatchEvent(
					new CustomEvent("window-visibility-change", {
						detail: { id, visible: true },
					})
				);
			} catch {}
		}
		function openAbout() {
			openById("about-window");
		}
		function openAboutMac() {
			openById("about-mac-window");
		}

		root.querySelectorAll("[data-open-about]").forEach((el) => {
			el.addEventListener("click", openAbout);
		});
		root.querySelectorAll("[data-open-about-mac]").forEach((el) => {
			el.addEventListener("click", openAboutMac);
		});

		function updateClock() {
			const el = root.querySelector("[data-clock]");
			const d = new Date();
			const hh = String(d.getHours()).padStart(2, "0");
			const mm = String(d.getMinutes()).padStart(2, "0");
			el.textContent = hh + ":" + mm;
		}
		updateClock();
		setInterval(updateClock, 60 * 1000);

		// Eliminado: comportamiento de "press-and-hold"; ahora sólo hover abre/cierra

		// Play error SFX when interacting with disabled menu items
		root.addEventListener("pointerdown", (e) => {
			const t = e.target;
			if (!(t instanceof Element)) return;
			const disabledItem = t.closest(".menu-item[aria-disabled=\"true\"]");
			if (disabledItem) {
				import('/src/lib/sfx.js')
					.then((m) => m.getSfx && m.getSfx())
					.then((s) => s && s.error && s.error())
					.catch(() => {});
			}
		});
	})();
</script>

<style is:inline>
	.about-launch {
		background: none;
		border: 0;
		padding: 0 6px;
		height: 100%;
		display: inline-flex;
		align-items: center;
		cursor: pointer;
	}
</style>
