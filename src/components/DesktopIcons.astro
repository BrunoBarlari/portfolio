---
/** DesktopIcons: Hard Disk and Trash icons with selection + double click actions */
---

<div class="desktop-icons-layer" aria-label="Desktop Icons">
	<button
		class="desktop-icon"
		data-icon-id="harddisk"
		style="left:12px; top:12px;"
	>
		<span class="icon-svg" aria-hidden="true">
			<svg
				width="32"
				height="32"
				viewBox="0 0 32 32"
				fill="none"
				xmlns="http://www.w3.org/2000/svg"
				shape-rendering="crispEdges"
			>
				<rect x="3" y="8" width="26" height="16" stroke="#000" fill="#FFF"
				></rect>
				<rect x="5" y="10" width="22" height="8" fill="#000"></rect>
				<rect x="24" y="20" width="3" height="2" fill="#000"></rect>
			</svg>
		</span>
		<span class="icon-label">Hard Disk</span>
	</button>
	<button
		class="desktop-icon"
		data-icon-id="trash"
		style="left:12px; top:108px;"
	>
		<span class="icon-svg" aria-hidden="true">
			<svg
				width="32"
				height="32"
				viewBox="0 0 32 32"
				fill="none"
				xmlns="http://www.w3.org/2000/svg"
				shape-rendering="crispEdges"
			>
				<rect x="10" y="8" width="12" height="3" fill="#000"></rect>
				<rect x="8" y="11" width="16" height="13" stroke="#000" fill="#FFF"
				></rect>
				<rect x="10" y="14" width="2" height="8" fill="#000"></rect>
				<rect x="15" y="14" width="2" height="8" fill="#000"></rect>
				<rect x="20" y="14" width="2" height="8" fill="#000"></rect>
			</svg>
		</span>
		<span class="icon-label">Trash</span>
	</button>
</div>

<script is:inline>
	(function () {
		const layer = document.currentScript.parentElement;
		const icons = Array.from(layer.querySelectorAll(".desktop-icon"));
		const LS = "desktopIconPositions";
		const grid = { cellW: 84, cellH: 96, padX: 12, padY: 12, gapY: 12 };

		function snap(pos) {
			const x = Math.max(
				0,
				Math.round((pos.x - grid.padX) / grid.cellW) * grid.cellW + grid.padX
			);
			const y = Math.max(
				0,
				Math.round((pos.y - grid.padY) / grid.cellH) * grid.cellH + grid.padY
			);
			return { x, y };
		}
		function setPos(el, x, y) {
			el.style.left = x + "px";
			el.style.top = y + "px";
		}
		function getPos(el) {
			return {
				x: parseInt(el.style.left) || 0,
				y: parseInt(el.style.top) || 0,
			};
		}
		function save() {
			const data = {};
			icons.forEach((i) => {
				const id = i.getAttribute("data-icon-id");
				data[id] = getPos(i);
			});
			try {
				localStorage.setItem(LS, JSON.stringify(data));
			} catch {}
		}
		function load() {
			try {
				const raw = localStorage.getItem(LS);
				if (!raw) return;
				const data = JSON.parse(raw);
				icons.forEach((i) => {
					const id = i.getAttribute("data-icon-id");
					if (data[id]) setPos(i, data[id].x, data[id].y);
				});
			} catch {}
		}
		function arrangeByName() {
			const sorted = icons.slice().sort((a, b) => {
				const ta = a.querySelector(".icon-label")?.textContent || "";
				const tb = b.querySelector(".icon-label")?.textContent || "";
				return ta.localeCompare(tb);
			});
			let col = 0,
				row = 0;
			sorted.forEach((el, idx) => {
				const x = grid.padX + col * grid.cellW;
				const y = grid.padY + row * grid.cellH;
				setPos(el, x, y);
				row++;
				if (y + grid.cellH * 2 > (layer.parentElement?.clientHeight || 600)) {
					row = 0;
					col++;
				}
			});
			save();
		}
		function cleanUp() {
			icons.forEach((el) => {
				const p = getPos(el);
				const s = snap(p);
				setPos(el, s.x, s.y);
			});
			save();
		}

		function selectIcon(el) {
			icons.forEach((i) => i.classList.toggle("selected", i === el));
		}
		function clearSelection() {
			icons.forEach((i) => i.classList.remove("selected"));
		}

		function openById(id) {
			try {
				const wm = window.__windowManager;
				if (wm && wm.setVisible) {
					wm.setVisible(id, true);
					return;
				}
			} catch {}
			try {
				window.dispatchEvent(
					new CustomEvent("window-visibility-change", {
						detail: { id, visible: true },
					})
				);
			} catch {}
		}

		layer.addEventListener("click", (e) => {
			const t = e.target;
			if (!(t instanceof Element)) return;
			const btn = t.closest(".desktop-icon");
			if (!btn) return;
			selectIcon(btn);
		});

		layer.addEventListener("dblclick", (e) => {
			const t = e.target;
			if (!(t instanceof Element)) return;
			const btn = t.closest(".desktop-icon");
			if (!btn) return;
			const id = btn.getAttribute("data-icon-id");
			if (id === "harddisk") openById("harddisk-window");
			if (id === "trash") openById("trash-window");
		});

		// Clicking empty desktop clears selection
		const desktop = document.querySelector("[data-desktop-canvas]");
		if (desktop) {
			desktop.addEventListener("mousedown", (e) => {
				const t = e.target;
				if (!(t instanceof Element)) return;
				if (!t.closest(".desktop-icon")) clearSelection();
			});
		}

		// Init from storage
		load();
		// Desktop commands
		window.addEventListener("desktop-arrange-by-name", arrangeByName);
		window.addEventListener("desktop-clean-up", cleanUp);
	})();
</script>

<style is:inline>
	.desktop-icons-layer {
		position: absolute;
		inset: 0;
		z-index: 2; /* below windows (>=10), above background (1) */
		pointer-events: none; /* only icons receive */
	}
	.desktop-icon {
		position: absolute;
		display: inline-flex;
		flex-direction: column;
		align-items: center;
		gap: 4px;
		background: transparent;
		border: 0;
		padding: 2px 4px;
		cursor: default;
		pointer-events: auto; /* clickable */
		user-select: none;
		width: 84px; /* ancho fijo de celda para alinear Ã­conos (icono centrado) */
	}
	.icon-svg svg {
		image-rendering: pixelated;
		display: block;
	}
	.desktop-icon.selected {
		outline: 1px dotted var(--black);
		outline-offset: 2px;
	}
	.icon-label {
		font-size: var(--fs-9);
		line-height: var(--lh-ui);
		color: var(--black);
		background: transparent;
		padding: 0 3px;
		text-align: center; /* asegura centrado del texto en la celda fija */
		white-space: nowrap; /* evita salto que cambie ancho visual */
	}
	.desktop-icon.selected .icon-label {
		background: var(--black);
		color: var(--white);
	}
</style>
