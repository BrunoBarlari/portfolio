---
/** Props: title (string), variant ('window'|'dialog'|'panel'), initiallyOpen (boolean), size ('sm'|'md'|'lg'), floating (boolean), x (number), y (number), w (number), h (number) **/
interface Props {
	title: string;
	variant?: "window" | "dialog" | "panel";
	initiallyOpen?: boolean;
	size?: "sm" | "md" | "lg";
	floating?: boolean;
	x?: number;
	y?: number;
	w?: number;
	h?: number;
}
const {
	title,
	variant = "window",
	initiallyOpen = true,
	size = "md",
	floating = false,
	x,
	y,
	w,
	h,
} = Astro.props as Props;
const bodyId = "win-body-" + Math.random().toString(36).slice(2);
const initialStyle = floating
	? `position: absolute; ${typeof y === "number" ? `top:${y}px;` : ""}${typeof x === "number" ? `left:${x}px;` : ""}${typeof w === "number" ? `width:${w}px;` : ""}${typeof h === "number" ? `height:${h}px;` : ""}`
	: undefined;
---

<section
	class={`window retro-border-outset ${variant} resize-drag`}
	data-window
	data-size={size}
	data-open={initiallyOpen ? "true" : "false"}
	data-floating={floating ? "true" : "false"}
	style={initialStyle}
>
	<div class="title-bar" data-titlebar>
		<button
			class="close-btn"
			type="button"
			aria-label="Cerrar"
			data-close
			aria-controls={bodyId}
			aria-expanded={initiallyOpen}></button>
		<strong class="title-text">{title}</strong>
		<button class="zoom-btn" type="button" aria-label="Zoom" data-zoom></button>
	</div>
	<div class="window-body" data-body id={bodyId} aria-hidden={!initiallyOpen}>
		<slot />
	</div>
	{
		floating && (
			<div class="resize-handle br" data-resize="br" aria-hidden="true" />
		)
	}
</section>
<script is:inline>
	(function () {
		const root = document.currentScript.parentElement;
		const titleBar = root.querySelector("[data-titlebar]");
		const closeBtn = root.querySelector("[data-close]");
		const zoomBtn = root.querySelector("[data-zoom]");
		const body = root.querySelector("[data-body]");
		const floating = root.getAttribute("data-floating") === "true";
		let open = root.getAttribute("data-open") === "true";

		function isMobile() {
			return matchMedia("(max-width: 768px)").matches;
		}
		function bringToFront() {
			const z = window.__winZ || 100;
			window.__winZ = z + 1;
			root.style.zIndex = String(window.__winZ);
		}
		function getCanvas() {
			let el = root.parentElement;
			while (el && !el.hasAttribute("data-desktop-canvas"))
				el = el.parentElement;
			return el || document.body;
		}

		function initWithInteract() {
			const interactApi = window.interact;
			if (!interactApi) return false;
			if (isMobile()) return true;

			root.style.position = "absolute";
			const canvas = getCanvas();

			// Global dragMoveListener function exactly as documented
			function dragMoveListener(event) {
				var target = event.target;
				// keep the dragged position in the data-x/data-y attributes
				var x = (parseFloat(target.getAttribute("data-x")) || 0) + event.dx;
				var y = (parseFloat(target.getAttribute("data-y")) || 0) + event.dy;

				// translate the element
				target.style.transform = "translate(" + x + "px, " + y + "px)";

				// update the position attributes
				target.setAttribute("data-x", x);
				target.setAttribute("data-y", y);
			}

			// Make window draggable from title bar only
			interactApi(root)
				.draggable({
					// Only allow dragging from the title bar
					allowFrom: "[data-titlebar]",
					// Don't drag from close button
					ignoreFrom: "[data-close]",
					// enable inertial throwing
					inertia: true,
					// keep the element within the area of its parent
					modifiers: [
						interactApi.modifiers.restrictRect({
							restriction: canvas,
							endOnly: true,
						}),
					],
					// enable autoScroll
					autoScroll: true,
					listeners: {
						// call this function on every dragmove event
						move: dragMoveListener,
						start() {
							bringToFront();
						},
					},
				})
				.resizable({
					// Avoid top edge so it doesn't conflict with drag handle (title bar)
					// Only allow resize from right & bottom (and bottom-right corner)
					edges: { left: false, right: true, bottom: true, top: false },
					listeners: {
						move(event) {
							var target = event.target;
							var x = parseFloat(target.getAttribute("data-x")) || 0;
							var y = parseFloat(target.getAttribute("data-y")) || 0;

							// update the element's style
							target.style.width = event.rect.width + "px";
							target.style.height = event.rect.height + "px";

							// translate when resizing from left (not used) or top (disabled)
							x += event.deltaRect.left;
							y += event.deltaRect.top;

							target.style.transform = "translate(" + x + "px," + y + "px)";

							target.setAttribute("data-x", x);
							target.setAttribute("data-y", y);
						},
					},
					modifiers: [
						// keep the edges inside the parent
						interactApi.modifiers.restrictEdges({
							outer: canvas,
						}),
						// minimum size
						interactApi.modifiers.restrictSize({
							min: { width: 280, height: 140 },
						}),
					],
					inertia: true,
				});

			// Click to focus/bring to front
			root.addEventListener("pointerdown", bringToFront);
			return true;
		}

		function renderOpen() {
			closeBtn.setAttribute("aria-expanded", String(open));
			if (open) {
				body.removeAttribute("aria-hidden");
				body.removeAttribute("inert");
			} else {
				body.setAttribute("aria-hidden", "true");
				body.setAttribute("inert", "");
			}
		}

		closeBtn.addEventListener("click", () => {
			open = !open;
			root.setAttribute("data-open", String(open));
			renderOpen();
		});

		zoomBtn &&
			zoomBtn.addEventListener("click", () => {
				// naive zoom: toggle full width/height of parent
				const parent = root.parentElement || document.body;
				const pad = 8;
				if (!root.__zoomed) {
					root.__saved = {
						left: root.style.left,
						top: root.style.top,
						width: root.style.width,
						height: root.style.height,
						transform: root.style.transform,
						x: root.getAttribute("data-x"),
						y: root.getAttribute("data-y"),
					};
					root.style.transform = "translate(0px,0px)";
					root.setAttribute("data-x", "0");
					root.setAttribute("data-y", "0");
					root.style.left = pad + "px";
					root.style.top = pad + "px";
					root.style.width =
						Math.max(280, (parent.clientWidth || window.innerWidth) - pad * 2) +
						"px";
					root.style.height =
						Math.max(
							140,
							(parent.clientHeight || window.innerHeight) - pad * 2
						) + "px";
					root.__zoomed = true;
				} else {
					const s = root.__saved || {};
					root.style.left = s.left || "";
					root.style.top = s.top || "";
					root.style.width = s.width || "";
					root.style.height = s.height || "";
					root.style.transform = s.transform || "";
					if (s.x) root.setAttribute("data-x", s.x);
					if (s.y) root.setAttribute("data-y", s.y);
					root.__zoomed = false;
				}
			});

		renderOpen();

		if (floating) {
			// Try to initialize immediately if interact is available
			if (window.interact) {
				initWithInteract();
			} else {
				// Wait for interact.js to load
				window.addEventListener("load", () => {
					setTimeout(() => {
						initWithInteract();
					}, 100); // Small delay to ensure interact.js is ready
				});
			}
		}

		window.addEventListener("resize", () => {
			if (isMobile()) {
				root.style.position = "";
				root.style.left = "";
				root.style.top = "";
				root.style.width = "";
				root.style.height = "";
				root.style.transform = "";
				root.removeAttribute("data-x");
				root.removeAttribute("data-y");
			} else if (floating) {
				root.style.position = "absolute";
			}
		});
	})();
</script>
<style is:inline>
	.window {
		margin: 1.5rem 0;
	}
	.window-body {
		padding: 0.9rem 1.1rem 1.1rem;
		font-size: 16px;
		line-height: 1.5;
	}
	.dialog .title-bar {
		background: var(--platinum-300);
	}
	.panel .title-bar {
		background: var(--platinum-100);
	}

	/* Resize handle bottom-right */
	.resize-handle.br {
		position: absolute;
		right: 4px;
		bottom: 4px;
		width: 12px;
		height: 12px;
		cursor: nwse-resize;
		background: linear-gradient(135deg, transparent 50%, var(--border-dark) 50%),
			linear-gradient(
				135deg,
				transparent calc(50% - 2px),
				var(--border-light) calc(50% - 2px)
			);
	}

	@media (max-width: 768px) {
		[data-floating="true"] .title-bar {
			cursor: default;
		}
		.resize-handle {
			display: none;
		}
	}

	/* Make title bar draggable */
	[data-floating="true"] .title-bar {
		cursor: move;
		user-select: none;
	}

	/* Classic 1-bit title tweaks */
	.title-bar {
		position: relative;
		height: 18px;
		padding: 0 var(--space-2);
		display: flex;
		align-items: center;
		gap: var(--space-2);
		background: repeating-linear-gradient(
			45deg,
			var(--gray-25) 0 1px,
			var(--white) 1px 2px
		);
		border-bottom: var(--border);
	}
	.title-text {
		position: absolute;
		left: 50%;
		transform: translateX(-50%);
		font-weight: 700;
		white-space: nowrap;
		pointer-events: none;
		max-width: calc(100% - 48px);
		overflow: hidden;
		text-overflow: ellipsis;
	}
	.close-btn,
	.zoom-btn {
		position: relative;
		width: 11px;
		height: 11px;
		border: var(--border);
		background: #fff;
		box-shadow:
			inset -1px -1px 0 0 var(--gray-75),
			inset 1px 1px 0 0 var(--highlight);
		padding: 0;
		line-height: 0;
		color: transparent;
		flex-shrink: 0;
	}
	.close-btn:active,
	.zoom-btn:active {
		box-shadow:
			inset 1px 1px 0 0 var(--gray-75),
			inset -1px -1px 0 0 var(--highlight);
	}
	/* Pixelated X for close */
	.close-btn::after {
		content: "";
		position: absolute;
		top: 50%;
		left: 50%;
		width: 7px;
		height: 7px;
		transform: translate(-50%, -50%);
		background: linear-gradient(
				45deg,
				transparent 3px,
				#000 3px 4px,
				transparent 4px
			),
			linear-gradient(-45deg, transparent 3px, #000 3px 4px, transparent 4px);
		image-rendering: pixelated;
	}
	.zoom-btn::after {
		content: "";
		position: absolute;
		top: 50%;
		left: 50%;
		width: 7px;
		height: 7px;
		transform: translate(-50%, -50%);
		background:
			linear-gradient(#000, #000) center/1px 7px no-repeat,
			linear-gradient(#000, #000) center/7px 1px no-repeat;
		image-rendering: pixelated;
	}

	/* Focus ring 1-bit */
	.title-bar .close-btn:focus-visible,
	.title-bar .zoom-btn:focus-visible {
		outline: 1px dotted var(--black);
		outline-offset: 0;
	}

	/* Active variant (if you toggle class externally) */
	.window.active .title-bar {
		background: repeating-linear-gradient(
			45deg,
			var(--gray-35) 0 1px,
			var(--white) 1px 2px
		);
	}
	.window:not(.active) .title-bar {
		background: repeating-linear-gradient(
			45deg,
			var(--gray-10) 0 1px,
			var(--white) 1px 2px
		);
	}
	.window:not(.active) .title-text {
		color: var(--gray-60);
	}

	/* Inner border for content */
	.window-body::before {
		content: "";
		position: absolute;
		inset: 4px;
		border: 1px solid var(--black);
		pointer-events: none;
	}

	/* Make sure close button doesn't interfere */
	[data-floating="true"] .close-btn {
		cursor: pointer;
		user-select: none;
	}

	/* Disable intro animation on floating to avoid transform conflicts */
	.window[data-floating="true"] {
		animation: none !important;
	}
</style>
