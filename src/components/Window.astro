---
/** Props: title (string), variant ('window'|'dialog'|'panel'), initiallyOpen (boolean), size ('sm'|'md'|'lg'), floating (boolean), x (number), y (number), w (number), h (number) **/
interface Props {
	title: string;
	variant?: "window" | "dialog" | "panel";
	initiallyOpen?: boolean;
	size?: "sm" | "md" | "lg";
	floating?: boolean;
	x?: number;
	y?: number;
	w?: number;
	h?: number;
}
const {
	title,
	variant = "window",
	initiallyOpen = true,
	size = "md",
	floating = false,
	x,
	y,
	w,
	h,
} = Astro.props as Props;
const bodyId = "win-body-" + Math.random().toString(36).slice(2);
const initialStyle = floating
	? `position: absolute; ${typeof y === "number" ? `top:${y}px;` : ""}${typeof x === "number" ? `left:${x}px;` : ""}${typeof w === "number" ? `width:${w}px;` : ""}${typeof h === "number" ? `height:${h}px;` : ""}`
	: undefined;
---

<section
	class={`window retro-border-outset ${variant} resize-drag`}
	data-window
	data-size={size}
	data-open={initiallyOpen ? "true" : "false"}
	data-floating={floating ? "true" : "false"}
	style={initialStyle}
>
	<div class="title-bar" data-titlebar>
		<button
			class="close-btn"
			type="button"
			aria-label="Cerrar"
			data-close
			aria-controls={bodyId}
			aria-expanded={initiallyOpen}>Ã—</button
		>
		<strong>{title}</strong>
	</div>
	<div class="window-body" data-body id={bodyId} aria-hidden={!initiallyOpen}>
		<slot />
	</div>
	{
		floating && (
			<div class="resize-handle br" data-resize="br" aria-hidden="true" />
		)
	}
</section>
<script is:inline>
	(function () {
		const root = document.currentScript.parentElement;
		const titleBar = root.querySelector("[data-titlebar]");
		const closeBtn = root.querySelector("[data-close]");
		const body = root.querySelector("[data-body]");
		const floating = root.getAttribute("data-floating") === "true";
		let open = root.getAttribute("data-open") === "true";

		function isMobile() {
			return matchMedia("(max-width: 768px)").matches;
		}
		function bringToFront() {
			const z = window.__winZ || 100;
			window.__winZ = z + 1;
			root.style.zIndex = String(window.__winZ);
		}
		function getCanvas() {
			let el = root.parentElement;
			while (el && !el.hasAttribute("data-desktop-canvas"))
				el = el.parentElement;
			return el || document.body;
		}

		function initWithInteract() {
			const interactApi = window.interact;
			if (!interactApi) return false;
			if (isMobile()) return true;

			root.style.position = "absolute";
			const canvas = getCanvas();

			// Global dragMoveListener function exactly as documented
			function dragMoveListener(event) {
				var target = event.target;
				// keep the dragged position in the data-x/data-y attributes
				var x = (parseFloat(target.getAttribute("data-x")) || 0) + event.dx;
				var y = (parseFloat(target.getAttribute("data-y")) || 0) + event.dy;

				// translate the element
				target.style.transform = "translate(" + x + "px, " + y + "px)";

				// update the position attributes
				target.setAttribute("data-x", x);
				target.setAttribute("data-y", y);
			}

			// Make window draggable from title bar only
			interactApi(root)
				.draggable({
					// Only allow dragging from the title bar
					allowFrom: "[data-titlebar]",
					// Don't drag from close button
					ignoreFrom: "[data-close]",
					// enable inertial throwing
					inertia: true,
					// keep the element within the area of its parent
					modifiers: [
						interactApi.modifiers.restrictRect({
							restriction: canvas,
							endOnly: true,
						}),
					],
					// enable autoScroll
					autoScroll: true,
					listeners: {
						// call this function on every dragmove event
						move: dragMoveListener,
						start() {
							bringToFront();
						},
					},
				})
				.resizable({
					// Avoid top edge so it doesn't conflict with drag handle (title bar)
					// Only allow resize from right & bottom (and bottom-right corner)
					edges: { left: false, right: true, bottom: true, top: false },
					listeners: {
						move(event) {
							var target = event.target;
							var x = parseFloat(target.getAttribute("data-x")) || 0;
							var y = parseFloat(target.getAttribute("data-y")) || 0;

							// update the element's style
							target.style.width = event.rect.width + "px";
							target.style.height = event.rect.height + "px";

							// translate when resizing from left (not used) or top (disabled)
							x += event.deltaRect.left;
							y += event.deltaRect.top;

							target.style.transform = "translate(" + x + "px," + y + "px)";

							target.setAttribute("data-x", x);
							target.setAttribute("data-y", y);
						},
					},
					modifiers: [
						// keep the edges inside the parent
						interactApi.modifiers.restrictEdges({
							outer: canvas,
						}),
						// minimum size
						interactApi.modifiers.restrictSize({
							min: { width: 280, height: 140 },
						}),
					],
					inertia: true,
				});

			// Click to focus/bring to front
			root.addEventListener("pointerdown", bringToFront);
			return true;
		}

		function renderOpen() {
			closeBtn.setAttribute("aria-expanded", String(open));
			if (open) {
				body.removeAttribute("aria-hidden");
				body.removeAttribute("inert");
			} else {
				body.setAttribute("aria-hidden", "true");
				body.setAttribute("inert", "");
			}
		}

		closeBtn.addEventListener("click", () => {
			open = !open;
			root.setAttribute("data-open", String(open));
			renderOpen();
		});

		renderOpen();

		if (floating) {
			// Try to initialize immediately if interact is available
			if (window.interact) {
				initWithInteract();
			} else {
				// Wait for interact.js to load
				window.addEventListener("load", () => {
					setTimeout(() => {
						initWithInteract();
					}, 100); // Small delay to ensure interact.js is ready
				});
			}
		}

		window.addEventListener("resize", () => {
			if (isMobile()) {
				root.style.position = "";
				root.style.left = "";
				root.style.top = "";
				root.style.width = "";
				root.style.height = "";
				root.style.transform = "";
				root.removeAttribute("data-x");
				root.removeAttribute("data-y");
			} else if (floating) {
				root.style.position = "absolute";
			}
		});
	})();
</script>
<style is:inline>
	.window {
		margin: 1.5rem 0;
	}
	.window-body {
		padding: 0.9rem 1.1rem 1.1rem;
		font-size: 16px;
		line-height: 1.5;
	}
	.dialog .title-bar {
		background: var(--platinum-300);
	}
	.panel .title-bar {
		background: var(--platinum-100);
	}

	/* Resize handle bottom-right */
	.resize-handle.br {
		position: absolute;
		right: 4px;
		bottom: 4px;
		width: 12px;
		height: 12px;
		cursor: nwse-resize;
		background: linear-gradient(135deg, transparent 50%, var(--border-dark) 50%),
			linear-gradient(
				135deg,
				transparent calc(50% - 2px),
				var(--border-light) calc(50% - 2px)
			);
	}

	@media (max-width: 768px) {
		[data-floating="true"] .title-bar {
			cursor: default;
		}
		.resize-handle {
			display: none;
		}
	}

	/* Make title bar draggable */
	[data-floating="true"] .title-bar {
		cursor: move;
		user-select: none;
	}

	/* Make sure close button doesn't interfere */
	[data-floating="true"] .close-btn {
		cursor: pointer;
		user-select: none;
	}

	/* Disable intro animation on floating to avoid transform conflicts */
	.window[data-floating="true"] {
		animation: none !important;
	}
</style>
