---
interface Props {
	title?: string;
	description?: string;
}
const {
	title = "Portfolio | Desarrollador de Software",
	description = "Portfolio profesional orientado a reclutadores y colegas t√©cnicos.",
} = Astro.props as Props;
const siteUrl = Astro.site?.href || "";
import "../styles/retro.css";
import "../styles/tailwind.css";
const base = (import.meta as any).env?.BASE_URL || "/";
---

<!doctype html>
<html
	lang="es"
	class="no-js"
	style={`--texture-url: url('${base}textures/dither-noise.svg');`}
>
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width,initial-scale=1" />
		<title>{title}</title>
		<meta name="description" content={description} />
		<meta name="theme-color" content="#F2F2F2" />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:type" content="website" />
		<meta property="og:url" content={siteUrl} />
		<meta property="og:image" content={siteUrl + "og.png"} />
		<link rel="canonical" href={siteUrl} />
		<link
			rel="preload"
			href={base + "fonts/ChicagoFLF.woff2"}
			as="font"
			type="font/woff2"
			crossorigin="anonymous"
		/>
		<link
			rel="preload"
			href={base + "fonts/VT323.woff2"}
			as="font"
			type="font/woff2"
			crossorigin="anonymous"
		/>
		<link rel="icon" type="image/svg+xml" href={base + "icons/apple.svg"} />
		<link rel="stylesheet" href={base + "fonts/fonts.css"} />
		<meta name="color-scheme" content="light dark" />
		<script
			src="https://cdn.jsdelivr.net/npm/interactjs/dist/interact.min.js"
			defer></script>
		<!-- Pre-initialize SFX manager and expose as window.__sfx -->
		<script type="module">
			import { getSfx } from "/src/lib/sfx.js";
			try {
				window.__sfx = getSfx();
			} catch {}
		</script>
		<!-- Global keyboard shortcuts: Cmd+W (close), Cmd+M (shade), Cmd+1/2/3 open windows -->
		<script is:inline>
			(function () {
				function getFocusedWindowId() {
					let focusedId = null;
					try {
						const wins = Array.from(
							document.querySelectorAll(".window-component")
						);
						let maxZ = -Infinity,
							maxEl = null;
						for (const el of wins) {
							if (el.style.display === "none") continue;
							const z = parseInt(el.style.zIndex) || 0;
							if (z > maxZ) {
								maxZ = z;
								maxEl = el;
							}
						}
						focusedId = maxEl?.id || null;
					} catch {}
					return focusedId;
				}

				function dispatchWindowCommand(action, id) {
					try {
						window.dispatchEvent(
							new CustomEvent("window-command", { detail: { action, id } })
						);
					} catch {}
				}

				window.addEventListener("keydown", (e) => {
					// Ignore when typing in inputs/textareas/contenteditable
					const t = e.target;
					if (
						t &&
						(t.tagName === "INPUT" ||
							t.tagName === "TEXTAREA" ||
							t.isContentEditable)
					)
						return;

					const meta = e.metaKey; // Cmd on macOS
					if (!meta) return;

					switch (e.key) {
						case "w":
							// Close focused window
							e.preventDefault();
							const idW = getFocusedWindowId();
							if (idW) {
								dispatchWindowCommand("close", idW);
							} else {
								try {
									window.__sfx && window.__sfx.error && window.__sfx.error();
								} catch {}
							}
							break;
						case "m":
							// Shade/unshade focused
							e.preventDefault();
							const idM = getFocusedWindowId();
							if (idM) {
								dispatchWindowCommand("shade", idM);
							}
							break;
						case "1":
							e.preventDefault();
							try {
								window.__windowManager?.setVisible("about-window", true);
							} catch {}
							break;
						case "2":
							e.preventDefault();
							try {
								window.__windowManager?.setVisible("projects-window", true);
							} catch {}
							break;
						case "3":
							e.preventDefault();
							try {
								window.__windowManager?.setVisible("contact-window", true);
							} catch {}
							break;
						default:
							break;
					}
				});
			})();
		</script>
	</head>
	<body>
		<a href="#content" class="sr-only-focus">Saltar al contenido</a>
		<slot />
		<script is:inline>
			document.documentElement.classList.remove("no-js");
		</script>
		<style is:inline>
			.sr-only-focus {
				position: absolute;
				left: -10000px;
				top: auto;
				width: 1px;
				height: 1px;
				overflow: hidden;
			}
			.sr-only-focus:focus {
				position: fixed;
				left: 8px;
				top: 8px;
				width: auto;
				height: auto;
				padding: 4px 6px;
				background: var(--platinum-50);
				color: var(--platinum-900);
				border: 1px solid var(--border-dark);
				box-shadow:
					1px 1px 0 var(--border-light),
					-1px -1px 0 var(--border-mid);
				z-index: 100;
			}
		</style>
	</body>
</html>
